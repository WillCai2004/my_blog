{
    "version": "https://jsonfeed.org/version/1",
    "title": "By Will Cai",
    "subtitle": "",
    "icon": "https://willcai2004.github.io/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://willcai2004.github.io",
    "items": [
        {
            "id": "https://willcai2004.github.io/2024/10/17/computer-science/notes/Linux/1.1%20Linux%20basics/",
            "url": "https://willcai2004.github.io/2024/10/17/computer-science/notes/Linux/1.1%20Linux%20basics/",
            "title": "1 Linux Basics",
            "date_published": "2024-10-17T20:52:50.000Z",
            "content_html": "<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux:\"></a>Linux:</h1><ul>\n<li>an operating system with a <strong>GUI</strong> interface</li>\n</ul>\n<h2 id=\"Command-line-and-Terminal\"><a href=\"#Command-line-and-Terminal\" class=\"headerlink\" title=\"Command line and Terminal\"></a>Command line and Terminal</h2><ul>\n<li>most interaction is done via a terminal</li>\n<li>a terminal is a program used to interact with the shell</li>\n<li>the shell enables access to the operating system</li>\n<li>Terminal, command line, shell and any specific shells<ul>\n<li>basically referring to the same thing</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Shells\"><a href=\"#Shells\" class=\"headerlink\" title=\"Shells\"></a>Shells</h1><ul>\n<li>Windows shells<ul>\n<li>command prompt</li>\n<li>PowerShell</li>\n</ul>\n</li>\n<li>Linus shells<ul>\n<li>Bash (Born Again shell)</li>\n<li>also other shells, but works similar</li>\n<li>example: <code>uname@~/app/1</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"File-system\"><a href=\"#File-system\" class=\"headerlink\" title=\"File system\"></a>File system</h1><ul>\n<li>no hard drives, such as C:\\</li>\n<li>everything starts from &#x2F; the <strong>root</strong> directory</li>\n</ul>\n<h2 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"Path\"></a>Path</h2><ul>\n<li>Path is the list of &#x2F; separated directory names</li>\n</ul>\n<h3 id=\"Absolute-path\"><a href=\"#Absolute-path\" class=\"headerlink\" title=\"Absolute path\"></a>Absolute path</h3><ul>\n<li>absolute path starts with a &#x2F;</li>\n<li>list all the directories separated by a &#x2F;</li>\n<li><code>/home/code/app/1/data</code></li>\n</ul>\n<h3 id=\"Relative-path\"><a href=\"#Relative-path\" class=\"headerlink\" title=\"Relative path\"></a>Relative path</h3><ul>\n<li>relative path starts from the current directory</li>\n<li>may include a slash after first character</li>\n<li><code>app/1/data</code></li>\n</ul>\n<h4 id=\"Two-relative-path-operators\"><a href=\"#Two-relative-path-operators\" class=\"headerlink\" title=\"Two relative path operators\"></a>Two relative path operators</h4><ul>\n<li>single dot <code>.</code> <ul>\n<li>current directory</li>\n</ul>\n</li>\n<li>double dot <code>..</code><ul>\n<li>1 directory up the chain</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"cd-Navigating-directories\"><a href=\"#cd-Navigating-directories\" class=\"headerlink\" title=\"cd: Navigating directories\"></a>cd: Navigating directories</h2><ul>\n<li><strong>cd</strong> is short for change directory, it changes your working directory</li>\n<li><strong>cd</strong> works with absolute and relative paths</li>\n<li>if type <strong>cd</strong> only, will go to the home directory</li>\n</ul>\n<h2 id=\"ls-Listing-directories\"><a href=\"#ls-Listing-directories\" class=\"headerlink\" title=\"ls: Listing directories\"></a>ls: Listing directories</h2><ul>\n<li>lists the files and directories within this directory</li>\n<li>common flags -la</li>\n<li>Bash shortcut, <code>ll = ls -la</code></li>\n<li>File&#x2F;Directory pattern matching<ul>\n<li><strong>* Wild card</strong> - 0 to any number of any character<ul>\n<li><code>ls *</code> list all files</li>\n<li><code>ls *.c</code> lists all files that end in .c</li>\n</ul>\n</li>\n<li><strong>? Wild card</strong> for a single character<ul>\n<li><code>ls file?.c</code></li>\n<li>lists <code>file1.c filea.c file3.c......</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mkdir-Creating-directories\"><a href=\"#mkdir-Creating-directories\" class=\"headerlink\" title=\"mkdir: Creating directories\"></a>mkdir: Creating directories</h2><ul>\n<li>make directory</li>\n</ul>\n<h2 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h2><h3 id=\"Moving-files-or-directories\"><a href=\"#Moving-files-or-directories\" class=\"headerlink\" title=\"Moving files or directories\"></a>Moving files or directories</h3><ul>\n<li>mv: <code>mv &lt;source&gt; &lt;target&gt;</code></li>\n</ul>\n<pre><code class=\"bash\">uname@~/app/1 $ mv config.xml data/\nuname@~/app/1 $ mv beep data/beep\nuname@~/app/1 $ ll data\n.rw-r--r-- 115 uname 8012 Mar  2022 demo.dat\n.rwxr-xr-x   - uname   12 Feb  2021 config.xml\ndrwxr-xr-x   - uname   14 Aug 06:02 beep\n</code></pre>\n<h3 id=\"Renaming-files\"><a href=\"#Renaming-files\" class=\"headerlink\" title=\"Renaming files\"></a>Renaming files</h3><ul>\n<li>mv: <code>mv &lt;oldname&gt; &lt;newname&gt;</code></li>\n</ul>\n<h2 id=\"cp-Copying-files-or-directories\"><a href=\"#cp-Copying-files-or-directories\" class=\"headerlink\" title=\"cp: Copying files or directories\"></a>cp: Copying files or directories</h2><ul>\n<li>cp: <code>cp &lt;file&gt; &lt;target&gt;</code></li>\n</ul>\n<h2 id=\"rm-Removing-a-file-or-directory\"><a href=\"#rm-Removing-a-file-or-directory\" class=\"headerlink\" title=\"rm: Removing a file or directory\"></a>rm: Removing a file or directory</h2><ul>\n<li>rm: <code>rm &lt;file&gt;</code></li>\n<li>-i<ul>\n<li>prompt the user for each deletion</li>\n</ul>\n</li>\n<li>-v <ul>\n<li>with specific information</li>\n</ul>\n</li>\n<li>*<ul>\n<li>Remove everything that is not a directory </li>\n<li>does not start with a period</li>\n</ul>\n</li>\n<li>-r <ul>\n<li>Remove everything except items starting with period in current directory</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"echo-Print-the-value-provided\"><a href=\"#echo-Print-the-value-provided\" class=\"headerlink\" title=\"echo: Print the value provided\"></a>echo: Print the value provided</h2><ul>\n<li>by defaule, includes a new line <code>\\n</code> at the end</li>\n</ul>\n<h2 id=\"cat-Quickly-looking-at-file-contents\"><a href=\"#cat-Quickly-looking-at-file-contents\" class=\"headerlink\" title=\"cat: Quickly looking at file contents\"></a>cat: Quickly looking at file contents</h2><ul>\n<li>prints the contents of a file to the terminal</li>\n</ul>\n<h2 id=\"grep-Search-and-return\"><a href=\"#grep-Search-and-return\" class=\"headerlink\" title=\"grep: Search and return\"></a>grep: Search and return</h2><ul>\n<li>grep: means global regular expression</li>\n<li>searches a pattern and returns the line that match<ul>\n<li><code>grep &lt;option&gt; &lt;pattern&gt; [file]</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Running-programs\"><a href=\"#Running-programs\" class=\"headerlink\" title=\"Running programs\"></a>Running programs</h1><ul>\n<li>Running a program from the command line requires<ul>\n<li>the <strong>path</strong> to the program</li>\n<li>Any arguments sent into the program</li>\n</ul>\n</li>\n<li>While it runs the program<ul>\n<li>Outputs to standard output (terminal in most cases)</li>\n<li>Takes input via standard input (keyboard in most cases)</li>\n</ul>\n</li>\n<li>Returns a code on exit<ul>\n<li><code>uname@~/app/1 $ /bin/false</code> </li>\n<li><code>uname@~/app/1 $ /bin/echo &quot;$?&quot;</code></li>\n<li><code>1</code> (this is the value returned from &#x2F;bin&#x2F;false )</li>\n</ul>\n</li>\n<li>Must use .&#x2F; to execute a program in out current directory</li>\n</ul>\n<h1 id=\"Redirection\"><a href=\"#Redirection\" class=\"headerlink\" title=\"Redirection\"></a>Redirection</h1><h2 id=\"Redirecting-I-O\"><a href=\"#Redirecting-I-O\" class=\"headerlink\" title=\"Redirecting I&#x2F;O\"></a>Redirecting I&#x2F;O</h2><ul>\n<li><p>Default standard</p>\n<ul>\n<li>Input:<ul>\n<li>standard input- keyboard input</li>\n</ul>\n</li>\n<li>Output<ul>\n<li>standard output with a file descriptor of 1</li>\n<li>standard error with a file descriptor if 2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>can redirect a file to be any of these</p>\n</li>\n<li><p>use <code>&lt;</code> to redirects input of the target to the provided device or file</p>\n<ul>\n<li>Input less than expected can cause errors</li>\n<li>Redirects to standard input</li>\n</ul>\n</li>\n<li><p>Example:</p>\n<ul>\n<li><code>test.input</code> contains “Erik”</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"bash\">uname@~/app/1 $ ./myprogram &lt; test.input\nHello, Erik\nuname@~/app/1 $\n</code></pre>\n<ul>\n<li>use <code>&gt;</code> to redirect output from a program to a file</li>\n</ul>\n<pre><code class=\"bash\">uname@~/app/1 $ ll data &gt; /tmp/output.dat\nuname@~/app/1 $ cat /tmp/output.dat\n.rw-r--r-- 115 uname 8012 Mar  2022 demo.dat\n.rwxr-xr-x   - uname   12 Fab  2021 config.xml\ndrwxr-xr-x   - uname   14 Aug 06:02 beep\n</code></pre>\n<ul>\n<li>use <code>|</code> to pipe one output to another input</li>\n</ul>\n<pre><code class=\"bash\">uname@~/app/1 $ printf &quot;2\\n3\\n1\\n&quot; | sort -n\n1\n2\n3\n</code></pre>\n<p>or</p>\n<pre><code class=\"bash\">uname@~/app/1 $ printf &quot;2\\n3\\n1\\n&quot; | sort -n | grep 3\n3\n</code></pre>\n<h1 id=\"Regular-Expressions\"><a href=\"#Regular-Expressions\" class=\"headerlink\" title=\"Regular Expressions\"></a>Regular Expressions</h1><ul>\n<li><p>Regular expressions (regex) are sequences of characters that define search patterns</p>\n</li>\n<li><p>Used for string matching, validation, and text processing</p>\n</li>\n<li><p>Basic characters</p>\n<ul>\n<li>Literals: <code>meow</code></li>\n<li>The Wildcard <code>.</code></li>\n<li>Square Brackets <code>\\[a-zA-Z]</code></li>\n</ul>\n</li>\n<li><p>Quantifiers</p>\n<ul>\n<li>Come after a literal character, wildcard character, or square brackets</li>\n<li>describes how many times the proceeding item will occur<ul>\n<li>Asterisk <code>*</code> matches 0 or more occurrences</li>\n<li>Braces <code>&#123;n,m&#125;</code> Matches between n and m occurrences</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Example Regex Patterns:</p>\n<ul>\n<li>Email Validation:<ul>\n<li><code>[a-zA-Z0-9._%+!]*@[a-zA-Z0-9._%+!]*</code></li>\n<li>matches any email address</li>\n</ul>\n</li>\n<li>Phone Number:<ul>\n<li><code>([0-9]&#123;3&#125;)[0-9]&#123;3&#125;-[0-9]&#123;4&#125;</code></li>\n<li>(123)456-7890</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h3 id=\"gcc-Compile-C-source-code\"><a href=\"#gcc-Compile-C-source-code\" class=\"headerlink\" title=\"gcc: Compile C source code\"></a>gcc: Compile C source code</h3><ul>\n<li><code>gcc</code>:  compiles C source to a binary executable</li>\n<li>-o is where to put the binary executable</li>\n</ul>\n<pre><code class=\"bash\">uname@~/app/1 $ gcc main.c -o main.bin\nuname@~/app/1 $ ls -la\n.rw-r--r-- 8120 uname  12 May 2024 main.bin\n.rwxr-xr-x 100  uname  12 May 2024 main.c\n</code></pre>\n",
            "tags": [
                "Computer Science",
                "Linux",
                "Computer Science",
                "Linux"
            ]
        },
        {
            "id": "https://willcai2004.github.io/2024/10/14/game/game-review/Rainworld/",
            "url": "https://willcai2004.github.io/2024/10/14/game/game-review/Rainworld/",
            "title": "Rainworld",
            "date_published": "2024-10-15T02:21:11.000Z",
            "content_html": "<p>(↓English version below↓)</p>\n<h2 id=\"中文版\"><a href=\"#中文版\" class=\"headerlink\" title=\"中文版:\"></a>中文版:</h2><p>终于通关了《雨世界》，经历了各种艰难，查阅攻略才完成。这款游戏虽已问世七年，但以现在的标准来看，无论在美术、玩法、机制还是剧情上都达到了极高的水准，是我心目中制作最精良的2D游戏之一。</p>\n<img loading=\"lazy\" data-src=\"1.png\" alt=\"1\">\n《雨世界》是一款基于Unity引擎制作的2D独立游戏。在游戏中，玩家扮演一种被称为“蛞蝓猫”的生物，在古代文明遗留下的废墟中探索生存。乍一看似乎是传统的探索类RPG，但制作组在美术和机制上的精细打磨，使其脱颖而出。\n\n<img loading=\"lazy\" data-src=\"3.png\" alt=\"3\">\n首先是美术方面。玩家在控制蛞蝓猫时，会穿越古文明的废墟，随处可见裸露的钢筋架、断裂的管道和通风系统，彰显了曾经的文明辉煌。然而，这一切又被层层植被覆盖，形成了一个繁盛的生态系统。废墟的“破败”与新生命的“生机”相互交织，又形成鲜明的对比。\n\n<img loading=\"lazy\" data-src=\"8.png\" alt=\"8\">\n<img loading=\"lazy\" data-src=\"7.png\" alt=\"7\">\n这种感觉在蛞蝓猫进入古代遗迹、仍在勉强运作的巨大结构中达到顶峰。游戏中的“迭代器”内部，广阔的“系统总线”宛如八车道高速公路，而神经元组件则如同深海中的荧光鱼群，又似星辰在无重力场中漂浮。古文明的宏伟与蛞蝓猫的渺小对比鲜明，让人既震撼又惋惜。\n\n<img loading=\"lazy\" data-src=\"4.png\" alt=\"4\">\n<img loading=\"lazy\" data-src=\"5.png\" alt=\"5\">\n在机制方面，制作组赋予《雨世界》每种生物不同的AI，并使用类似3D骨骼绑定技术制作所有动物。这让游戏中的生物不仅具有基本的“战或逃”反应，还具备一定的思考和判断能力。结合流畅自然的动作，构建了一个栩栩如生、完整的生态系统。这种生态还原程度，即使在以生态系统为卖点的游戏中也十分罕见。\n\n<img loading=\"lazy\" data-src=\"9.png\" alt=\"9\">\n<img loading=\"lazy\" data-src=\"6.png\" alt=\"6\">\n生命在古代废墟中焕发，渺小的蛞蝓猫在其中穿行。冷却水自迭代器中排出，如瀑布般的大雨冲刷着新生的生命。这正是我喜爱《雨世界》的原因: 抛开剧情对轮回与虚无主义的探讨，化身食物链低端的蛞蝓猫，在这个精心构建的世界中游荡，细细感受曾经与现在的一切，这本身就是一种极大的美好。\n\n<p>图片参考b站视频 <a href=\"https://www.bilibili.com/video/BV1gg4y1d7oj\">BV1gg4y1d7oj</a></p>\n<h2 id=\"English-Version\"><a href=\"#English-Version\" class=\"headerlink\" title=\"English Version:\"></a>English Version:</h2><p>Finally, I have completed Rain World after going through countless difficulties, and I had to rely on guides to make it through. Though this game has been out for seven years, by today’s standards, whether in terms of art, gameplay, mechanics, or story, it still stands at an impressively high level. In my opinion, it’s one of the most exquisitely crafted 2D games ever made.</p>\n<img loading=\"lazy\" data-src=\"1.png\" alt=\"1\">\n*Rain World* is a 2D indie game made using the Unity engine. In the game, players take on the role of a creature known as the \"Slugcat,\" exploring and surviving in the ruins left behind by an ancient civilization. At first glance, it may seem like a traditional exploration RPG, but the development team's meticulous polishing of both the art and mechanics sets it apart from the rest. \n\n<img loading=\"lazy\" data-src=\"3.png\" alt=\"3\"> \nStarting with the art, as the player controls the Slugcat, they traverse the ruins of an ancient civilization. Exposed steel structures, broken pipes, and ventilation systems are visible everywhere, showcasing the glory of a once-great civilization. Yet, all of this is overgrown with layers of vegetation, creating a flourishing ecosystem. The contrast between the \"decay\" of the ruins and the \"vitality\" of new life intertwines, forming a striking juxtaposition. \n\n<img loading=\"lazy\" data-src=\"8.png\" alt=\"8\"> \n<img loading=\"lazy\" data-src=\"7.png\" alt=\"7\"> \nThis feeling reaches its peak when the Slugcat enters the still-operational massive structures of the ancient ruins. Inside the game’s \"Iterators,\" the vast \"system buses\" resemble eight-lane highways, while neuron components appear like glowing schools of fish in the deep sea, or stars drifting in a zero-gravity field. The grandeur of the ancient civilization stands in stark contrast to the small Slugcat, evoking both awe and regret. \n\n<img loading=\"lazy\" data-src=\"4.png\" alt=\"4\"> \n<img loading=\"lazy\" data-src=\"5.png\" alt=\"5\"> \nOn the mechanics side, the development team gave each creature in *Rain World* its own AI, utilizing a technology similar to 3D skeleton rigging to animate all animals. This means the creatures in the game not only have basic \"fight or flight\" reactions but also possess a certain level of thinking and decision-making ability. Combined with smooth and natural movements, this builds a vivid and complete ecosystem. The level of ecological simulation here is rare, even among games that specifically market their ecosystems as key features. \n\n<img loading=\"lazy\" data-src=\"9.png\" alt=\"9\"> \n<img loading=\"lazy\" data-src=\"6.png\" alt=\"6\"> \nLife thrives within the ancient ruins as the tiny Slugcat roams through it. Cooling water is discharged from the Iterators, with torrential rains washing over newly born life. This is why I love *Rain World*—setting aside the story's exploration of the themes of reincarnation and nihilism, simply becoming a low-level creature in the food chain, wandering through this meticulously crafted world and slowly feeling everything from the past and the present, is an immense beauty in itself.\n\n<p>Image reference from the Bilibili video <a href=\"https://www.bilibili.com/video/BV1gg4y1d7oj\">BV1gg4y1d7oj</a></p>\n",
            "tags": [
                "Game",
                "Game Review",
                "Game"
            ]
        },
        {
            "id": "https://willcai2004.github.io/2024/09/22/computer-science/test_page/",
            "url": "https://willcai2004.github.io/2024/09/22/computer-science/test_page/",
            "title": "test_测试",
            "date_published": "2024-09-23T05:36:24.000Z",
            "content_html": "<h1 id=\"这是一个测试文档\"><a href=\"#这是一个测试文档\" class=\"headerlink\" title=\"这是一个测试文档\"></a>这是一个测试文档</h1><ul>\n<li>this is a test file</li>\n<li>I will test new features here</li>\n<li>If you see any bugs, please tell me</li>\n<li>我会在这里测试新的功能</li>\n<li>假如发现了任何bug, 请告诉我</li>\n</ul>\n<img loading=\"lazy\" data-src=\"test_image.jpg\" alt=\"桌面背景\">\n",
            "tags": [
                "Computer Science",
                "Test",
                "Computer Science"
            ]
        }
    ]
}